% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_lightgbm.R
\name{lgb.train_with_cv}
\alias{lgb.train_with_cv}
\title{lgb.train_with_cv}
\usage{
lgb.train_with_cv(
  df.train,
  df.valid,
  fnames,
  label,
  fnames.cat,
  id = NULL,
  rules = NULL,
  params = NULL,
  cv.verbose = 0,
  train.verbose = 1,
  cv = FALSE,
  nfold = 5,
  score.fun = Metrics::auc,
  ...
)
}
\arguments{
\item{df.train}{data.frame for train set}

\item{df.valid}{data.frame for valid set}

\item{fnames}{all feature names}

\item{label}{label name}

\item{fnames.cat}{categorical feature names}

\item{id}{colnames of id, if not provide, default to use rowname}

\item{rules}{rules to index categorical features}

\item{params}{list of params for lightgbm}

\item{cv.verbose}{whether verbose when cv}

\item{train.verbose}{whether verbose when train}

\item{cv}{whether perform a k-fold cross validation, default at FALSE}

\item{nfold}{number of folds of cross validation, if cv is TRUE}

\item{score.fun}{score functino for validation, defaults to auc}

\item{...}{other parameters in \code{lgb.train}}
}
\value{
list of (model, rules, fnames)
}
\description{
Train LightGBM with cross-validation
}
\examples{
label <- 'label'
fnames <- c('Sex','Class','Age','Freq')
fnames.cat <- c('Sex','Age','Class')
df <- data.frame(Titanic)
df$label <- ifelse(df$Survived == "Yes", 1 ,0)
in.train <- runif(nrow(df)) < 0.8
df.train <- df[in.train, ]
df.valid <- df[!in.train, ]
bst <- lgb.train_with_cv(df.train, df.valid,
                       fnames = fnames,
                       label = label,
                       fnames.cat = fnames.cat,
                       rules = NULL, cv = TRUE,
                       num_leaves = 63,
                       learning_rate = 1.0,
                       nrounds = 10L,
                       min_data = 1L,
                       cv.verbose = 1,
                       train.verbose = 1,
                       eval = 'auc',
                       eval_freq = 10,
                       nfold = 2L,
                       early_stopping_rounds = 5L,
                       objective = "binary")
lgb.save_model(bst, './saved_model','lgb_baseline', verbose = TRUE)
bst.loaded <- lgb.load_model('./saved_model','lgb_baseline')
preds <- lgb.predict(bst.loaded, df.valid)
}
